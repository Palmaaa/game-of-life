{"mappings":"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","sources":["src/models/Cell.ts","src/models/Population.ts","src/utils/index.ts","src/index.ts"],"sourcesContent":["class Cell {\n  private width: number;\n\n  private height: number;\n\n  x: number;\n\n  y: number;\n\n  c: CanvasRenderingContext2D;\n\n  dx: number;\n\n  dy: number;\n\n  constructor(c: CanvasRenderingContext2D, x: number, y: number, sideLength: number) {\n    this.x = x;\n    this.y = y;\n    this.c = c;\n    this.width = sideLength;\n    this.height = sideLength;\n    this.dx = sideLength;\n    this.dy = sideLength;\n\n    this.draw();\n  }\n\n  draw() {\n    this.c.fillRect(this.x, this.y, this.width, this.height);\n    this.c.strokeRect(this.x, this.y, this.width, this.height);\n  }\n\n  die() {\n    this.c.clearRect(this.x, this.y, this.width, this.height);\n  }\n\n  shouldDie(cells: Cell[]) {\n    const numberOfNeighbours = this.getNumberOfNeighbours(cells);\n    return numberOfNeighbours < 2 || numberOfNeighbours > 3;\n  }\n\n  getNumberOfNeighbours(cells: Cell[]) {\n    let n = 0;\n    cells.forEach((cell) => {\n      if (\n        (cell.x === this.x - this.width && cell.y === this.y - this.height)\n        || (cell.x === this.x - this.width && cell.y === this.y)\n        || (cell.x === this.x - this.width && cell.y === this.y + this.height)\n        || (cell.x === this.x && cell.y === this.y - this.height)\n        || (cell.x === this.x && cell.y === this.y + this.height)\n        || (cell.x === this.x + this.width && cell.y === this.y - this.height)\n        || (cell.x === this.x + this.width && cell.y === this.y)\n        || (cell.x === this.x + this.width && cell.y === this.y + this.height)\n      ) {\n        n++;\n      }\n    });\n\n    return n;\n  }\n}\n\nexport default Cell;\n","import Cell from './Cell';\n\nconst canvas = document.querySelector('canvas')!;\n\nconst c = canvas.getContext('2d')!;\n\nclass Population {\n  cellSideLength: number;\n\n  aliveCells: Cell[];\n\n  deadCellsIndexes: number[] = [];\n\n  newBornCells: Cell[] = [];\n\n  generationCounter = 1;\n\n  constructor(aliveCells: Cell[], cellSideLength: number) {\n    this.aliveCells = aliveCells;\n    this.cellSideLength = cellSideLength;\n  }\n\n  nextGeneration() {\n    for (let x = 0; x < window.innerWidth; x += this.cellSideLength) {\n      for (let y = 0; y < window.innerHeight; y += this.cellSideLength) {\n        const cell = this.findCellAt(x, y);\n\n        if (cell) {\n          this.handleAliveCell(cell);\n        } else {\n          this.handleDeadCellAt(x, y);\n        }\n      }\n    }\n\n    this.cleanDeadCells();\n    this.aliveCells = [...this.aliveCells, ...this.newBornCells];\n    this.newBornCells = [];\n    this.deadCellsIndexes = [];\n    this.generationCounter++;\n  }\n\n  findCellAt(x: number, y: number): Cell | undefined {\n    return this.aliveCells.find((cell) => cell.x === x && cell.y === y);\n  }\n\n  handleDeadCellAt(x: number, y: number) {\n    if (this.shouldBecomeAliveCellAt(x, y)) {\n      this.newBornCells.push(new Cell(c, x, y, this.cellSideLength));\n    }\n  }\n\n  shouldBecomeAliveCellAt(x: number, y: number): boolean {\n    let n = 0;\n    this.aliveCells.forEach((cell) => {\n      if (\n        (cell.x === x - this.cellSideLength && cell.y === y - this.cellSideLength)\n        || (cell.x === x - this.cellSideLength && cell.y === y)\n        || (cell.x === x - this.cellSideLength && cell.y === y + this.cellSideLength)\n        || (cell.x === x && cell.y === y - this.cellSideLength)\n        || (cell.x === x && cell.y === y + this.cellSideLength)\n        || (cell.x === x + this.cellSideLength && cell.y === y - this.cellSideLength)\n        || (cell.x === x + this.cellSideLength && cell.y === y)\n        || (cell.x === x + this.cellSideLength && cell.y === y + this.cellSideLength)\n      ) {\n        n++;\n      }\n    });\n\n    return n === 3;\n  }\n\n  handleAliveCell(cell: Cell) {\n    if (cell.shouldDie(this.aliveCells)) {\n      cell.die();\n      const deadCellIndex = this.aliveCells.findIndex(\n        (aliveCell) => aliveCell.x === cell.x && aliveCell.y === cell.y,\n      );\n      this.deadCellsIndexes.push(deadCellIndex);\n    }\n  }\n\n  cleanDeadCells() {\n    this.deadCellsIndexes.sort((a, b) => a - b);\n    for (let i = this.deadCellsIndexes.length - 1; i >= 0; i--) {\n      this.aliveCells.splice(this.deadCellsIndexes[i], 1);\n    }\n  }\n}\n\nexport default Population;\n","import Cell from '../models/Cell';\n\nexport function getCellPosition(coordinate: number, cellSideLength: number) {\n  return cellSideLength * (Math.ceil(coordinate / cellSideLength) - 1);\n}\n\nexport function alreadyHasCellAt(x: number, y: number, cells: Cell[]) {\n  return Boolean(cells.find((c) => c.x === x && c.y === y));\n}\n","import Cell from './models/Cell';\nimport Population from './models/Population';\n\nimport { alreadyHasCellAt, getCellPosition } from './utils';\n\nlet cells: Cell[] = [];\n\nlet cellSideLength: number;\n\nlet isRunning = false;\n\nlet requestId: number;\n\nconst canvas = document.querySelector('canvas')!;\nconst c = canvas.getContext('2d')!;\n\nfunction setupCanvas() {\n  canvas.height = window.innerHeight;\n  canvas.width = window.innerWidth;\n\n  c.strokeStyle = '#ccc';\n  c.lineWidth = 1;\n\n  while (!cellSideLength) {\n    cellSideLength = Number(prompt('Enter the cell\\'s side length (in px)')!);\n  }\n\n  canvas.addEventListener('click', (event) => {\n    const x = getCellPosition(event.clientX, cellSideLength);\n    const y = getCellPosition(event.clientY, cellSideLength);\n\n    if (!isRunning && !alreadyHasCellAt(x, y, cells)) {\n      cells.push(\n        new Cell(\n          c,\n          x,\n          y,\n          cellSideLength,\n        ),\n      );\n    }\n  });\n}\n\nfunction startPopulation() {\n  const population = new Population(cells, cellSideLength);\n\n  let tick = 1;\n\n  function f() {\n    if (tick % 5 === 0 && isRunning) {\n      population.nextGeneration();\n    }\n    tick++;\n    requestId = requestAnimationFrame(f);\n  }\n\n  f();\n}\n\nconst keyboardActions: { [k: string]: () => void } = {\n  Enter: () => {\n    isRunning = true;\n    startPopulation();\n  },\n  t: () => {\n    isRunning = !isRunning;\n  },\n  r: () => {\n    isRunning = false;\n    cells = [];\n    cancelAnimationFrame(requestId);\n    c.clearRect(0, 0, canvas.width, canvas.height);\n  },\n};\n\nfunction registerKeyboardControls() {\n  document.addEventListener('keyup', (event) => {\n    keyboardActions[event.key]();\n  });\n}\n\nfunction main() {\n  setupCanvas();\n  registerKeyboardControls();\n}\n\nmain();\n"],"names":["$17a53c327d573614$export$2e2bcd8739ae039","c","x","y","sideLength","this","width","height","dx","dy","draw","fillRect","strokeRect","die","clearRect","shouldDie","cells","numberOfNeighbours","getNumberOfNeighbours","n","forEach","cell","$1ac9cc937539100c$var$c","document","querySelector","getContext","$1ac9cc937539100c$export$2e2bcd8739ae039","aliveCells","cellSideLength","deadCellsIndexes","newBornCells","generationCounter","nextGeneration","window","innerWidth","innerHeight","findCellAt","handleAliveCell","handleDeadCellAt","cleanDeadCells","find","shouldBecomeAliveCellAt","push","deadCellIndex","findIndex","aliveCell","sort","a","b","i","length","splice","$6c61bec066eb0609$export$83e188f12afc1ff1","coordinate","Math","ceil","$e04467055a32edce$var$cellSideLength","$e04467055a32edce$var$requestId","$e04467055a32edce$var$cells","$e04467055a32edce$var$isRunning","$e04467055a32edce$var$canvas","$e04467055a32edce$var$c","$e04467055a32edce$var$setupCanvas","strokeStyle","lineWidth","Number","prompt","addEventListener","event","clientX","clientY","Boolean","$6c61bec066eb0609$export$72415f29a38d6611","$e04467055a32edce$var$keyboardActions","Enter","population","tick","f","requestAnimationFrame","$e04467055a32edce$var$startPopulation","t","r","cancelAnimationFrame","key"],"version":3,"file":"index.475057bf.js.map"}